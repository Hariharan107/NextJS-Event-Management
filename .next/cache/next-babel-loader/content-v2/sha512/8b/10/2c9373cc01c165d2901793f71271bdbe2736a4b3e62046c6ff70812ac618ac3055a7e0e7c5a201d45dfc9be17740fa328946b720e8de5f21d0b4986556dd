{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Next_Js\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetupId]\\\\index.jsx\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport Head from \"next/head\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nconst index = ({\n  meetupData: {\n    image,\n    title,\n    address,\n    description\n  }\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    setLoading(false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 19\n    }, this), !loading && /*#__PURE__*/_jsxDEV(MeetupDetails, {\n      image: image,\n      title: title,\n      address: address,\n      description: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true);\n};\n\nexport default index;\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(process.env.MONGODB_URL);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetupsData = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  const singleMeetupData = meetupsData.map(meetup => ({\n    params: {\n      meetupId: meetup._id.toString()\n    }\n  }));\n  client.close();\n  return {\n    paths: singleMeetupData,\n    fallback: false\n  };\n};\nexport const getStaticProps = async context => {\n  const {\n    meetupId\n  } = context.params;\n  const client = await MongoClient.connect(process.env.MONGODB_URL);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetupData = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: meetupData._id.toString(),\n        title: meetupData.title,\n        image: meetupData.image,\n        address: meetupData.address,\n        description: meetupData.description\n      }\n    }\n  };\n};","map":{"version":3,"sources":["D:/Next_Js/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.jsx"],"names":["MongoClient","ObjectId","Head","React","useState","useEffect","MeetupDetails","index","meetupData","image","title","address","description","loading","setLoading","textAlign","getStaticPaths","client","connect","process","env","MONGODB_URL","db","meetupsCollection","collection","meetupsData","find","_id","toArray","singleMeetupData","map","meetup","params","meetupId","toString","close","paths","fallback","getStaticProps","context","findOne","props","id"],"mappings":"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","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\r\nimport Head from \"next/head\";\r\nimport React from \"react\";\r\nimport { useState,useEffect } from \"react\";\r\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\r\nconst index = ({ meetupData: { image, title, address, description } }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(()=>{\r\n    setLoading(false)\r\n  },[])\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>{title}</title>\r\n        <meta name=\"description\" content={description} />\r\n      </Head>\r\n      {loading && <h3 style={{ textAlign: \"center\" }}>Loading...</h3>}\r\n      {!loading && <MeetupDetails\r\n        image={image}\r\n        title={title}\r\n        address={address}\r\n        description={description}\r\n      />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default index;\r\n\r\nexport const getStaticPaths = async () => {\r\n  const client = await MongoClient.connect(process.env.MONGODB_URL);\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetupsData = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n  const singleMeetupData = meetupsData.map((meetup) => ({\r\n    params: {\r\n      meetupId: meetup._id.toString(),\r\n    },\r\n  }));\r\n\r\n  client.close();\r\n  return {\r\n    paths: singleMeetupData,\r\n    fallback: false,\r\n  };\r\n};\r\nexport const getStaticProps = async (context) => {\r\n  const { meetupId } = context.params;\r\n  const client = await MongoClient.connect(process.env.MONGODB_URL);\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetupData = await meetupsCollection.findOne({\r\n    _id: new ObjectId(meetupId),\r\n  });\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: meetupData._id.toString(),\r\n        title: meetupData.title,\r\n        image: meetupData.image,\r\n        address: meetupData.address,\r\n        description: meetupData.description,\r\n      },\r\n    },\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}