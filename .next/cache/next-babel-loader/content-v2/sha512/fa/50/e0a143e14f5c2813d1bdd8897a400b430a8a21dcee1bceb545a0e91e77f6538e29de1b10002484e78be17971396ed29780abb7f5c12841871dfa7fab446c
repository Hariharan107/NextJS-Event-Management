{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Next_Js\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetupId]\\\\index.jsx\";\nimport { MongoClient } from \"mongodb\";\nimport React from \"react\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nconst index = ({}) => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    image: \"https://images.unsplash.com/photo-1536599018102-9f803c140fc1?auto=format&fit=crop&w=440&h=220&q=60\",\n    title: \"First Meetup\",\n    address: \"Some Street 5 ,Some City\",\n    description: \"This is a first Meetup\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport default index;\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(process.env.MONGODB_URL);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetupsData = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  const singleMeetupData = meetupsData.map(meetup => ({\n    params: {\n      meetupId: meetup._id.toString()\n    }\n  }));\n  client.close();\n  return {\n    paths: singleMeetupData,\n    fallback: false\n  };\n};\nexport const getStaticProps = async context => {\n  const {\n    meetupId\n  } = context.params;\n  const client = await MongoClient.connect(process.env.MONGODB_URL);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetupData = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: {\n      image: \"https://images.unsplash.com/photo-1536599018102-9f803c140fc1?auto=format&fit=crop&w=440&h=220&q=60\",\n      title: \"First Meetup\",\n      address: \"Some Street 5 ,Some City\",\n      description: \"This is a first Meetup\"\n    }\n  };\n};","map":{"version":3,"sources":["D:/Next_Js/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.jsx"],"names":["MongoClient","React","MeetupDetails","index","getStaticPaths","client","connect","process","env","MONGODB_URL","db","meetupsCollection","collection","meetupsData","find","_id","toArray","singleMeetupData","map","meetup","params","meetupId","toString","close","paths","fallback","getStaticProps","context","meetupData","findOne","props","image","title","address","description"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,wCAA1B;;AACA,MAAMC,KAAK,GAAG,CAAC,EAAD,KAAQ;AACpB,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAC,oGADR;AAEE,IAAA,KAAK,EAAC,cAFR;AAGE,IAAA,OAAO,EAAC,0BAHV;AAIE,IAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAWA,eAAeA,KAAf;AACA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CAAoBC,OAAO,CAACC,GAAR,CAAYC,WAAhC,CAArB;AACA,QAAMC,EAAE,GAAGL,MAAM,CAACK,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,WAAW,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAA1B;AACA,QAAMC,gBAAgB,GAAGJ,WAAW,CAACK,GAAZ,CAAiBC,MAAD,KAAa;AACpDC,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAEF,MAAM,CAACJ,GAAP,CAAWO,QAAX;AADJ;AAD4C,GAAb,CAAhB,CAAzB;AAMAjB,EAAAA,MAAM,CAACkB,KAAP;AACA,SAAO;AACLC,IAAAA,KAAK,EAAEP,gBADF;AAELQ,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID,CAhBM;AAiBP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C,QAAM;AAAEN,IAAAA;AAAF,MAAeM,OAAO,CAACP,MAA7B;AACA,QAAMf,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CAAoBC,OAAO,CAACC,GAAR,CAAYC,WAAhC,CAArB;AACA,QAAMC,EAAE,GAAGL,MAAM,CAACK,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMgB,UAAU,GAAG,MAAMjB,iBAAiB,CAACkB,OAAlB,CAA0B;AAAEd,IAAAA,GAAG,EAAEM;AAAP,GAA1B,CAAzB;AACAhB,EAAAA,MAAM,CAACkB,KAAP;AAEA,SAAO;AACLO,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EACH,oGAFG;AAGLC,MAAAA,KAAK,EAAE,cAHF;AAILC,MAAAA,OAAO,EAAE,0BAJJ;AAKLC,MAAAA,WAAW,EAAE;AALR;AADF,GAAP;AASD,CAjBM","sourcesContent":["import { MongoClient } from \"mongodb\";\r\nimport React from \"react\";\r\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\r\nconst index = ({}) => {\r\n  return (\r\n    <MeetupDetails\r\n      image=\"https://images.unsplash.com/photo-1536599018102-9f803c140fc1?auto=format&fit=crop&w=440&h=220&q=60\"\r\n      title=\"First Meetup\"\r\n      address=\"Some Street 5 ,Some City\"\r\n      description=\"This is a first Meetup\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default index;\r\nexport const getStaticPaths = async () => {\r\n  const client = await MongoClient.connect(process.env.MONGODB_URL);\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetupsData = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n  const singleMeetupData = meetupsData.map((meetup) => ({\r\n    params: {\r\n      meetupId: meetup._id.toString(),\r\n    },\r\n  }));\r\n\r\n  client.close();\r\n  return {\r\n    paths: singleMeetupData,\r\n    fallback: false,\r\n  };\r\n};\r\nexport const getStaticProps = async (context) => {\r\n  const { meetupId } = context.params;\r\n  const client = await MongoClient.connect(process.env.MONGODB_URL);\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetupData = await meetupsCollection.findOne({ _id: meetupId })\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      image:\r\n        \"https://images.unsplash.com/photo-1536599018102-9f803c140fc1?auto=format&fit=crop&w=440&h=220&q=60\",\r\n      title: \"First Meetup\",\r\n      address: \"Some Street 5 ,Some City\",\r\n      description: \"This is a first Meetup\",\r\n    },\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}