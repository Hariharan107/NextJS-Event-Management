{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Next_Js\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetupId]\\\\index.jsx\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport React from \"react\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nconst index = ({\n  image,\n  title,\n  description,\n  address\n}) => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    image: image,\n    title: title,\n    address: address,\n    description: description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport default index;\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(process.env.MONGODB_URL);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetupsData = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  const singleMeetupData = meetupsData.map(meetup => ({\n    params: {\n      meetupId: meetup._id.toString()\n    }\n  }));\n  client.close();\n  return {\n    paths: singleMeetupData,\n    fallback: false\n  };\n};\nexport const getStaticProps = async context => {\n  const {\n    meetupId\n  } = context.params;\n  const client = await MongoClient.connect(process.env.MONGODB_URL);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetupData = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: meetupData._id.toString(),\n        title: meetupData.title,\n        image: meetupData.image,\n        address: meetupData.address,\n        description: meetupData.description\n      }\n    }\n  };\n};","map":{"version":3,"sources":["D:/Next_Js/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.jsx"],"names":["MongoClient","ObjectId","React","MeetupDetails","index","image","title","description","address","getStaticPaths","client","connect","process","env","MONGODB_URL","db","meetupsCollection","collection","meetupsData","find","_id","toArray","singleMeetupData","map","meetup","params","meetupId","toString","close","paths","fallback","getStaticProps","context","meetupData","findOne","props","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,wCAA1B;;AACA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAOC,EAAAA,KAAP;AAAaC,EAAAA,WAAb;AAAyBC,EAAAA;AAAzB,CAAD,KAAuC;AACnD,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAEH,KADT;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,OAAO,EAAEE,OAHX;AAIE,IAAA,WAAW,EAAED;AAJf;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAWA,eAAeH,KAAf;AACA,OAAO,MAAMK,cAAc,GAAG,YAAY;AACxC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoBC,OAAO,CAACC,GAAR,CAAYC,WAAhC,CAArB;AACA,QAAMC,EAAE,GAAGL,MAAM,CAACK,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,WAAW,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAA1B;AACA,QAAMC,gBAAgB,GAAGJ,WAAW,CAACK,GAAZ,CAAiBC,MAAD,KAAa;AACpDC,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAEF,MAAM,CAACJ,GAAP,CAAWO,QAAX;AADJ;AAD4C,GAAb,CAAhB,CAAzB;AAMAjB,EAAAA,MAAM,CAACkB,KAAP;AACA,SAAO;AACLC,IAAAA,KAAK,EAAEP,gBADF;AAELQ,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID,CAhBM;AAiBP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C,QAAM;AAAEN,IAAAA;AAAF,MAAeM,OAAO,CAACP,MAA7B;AACA,QAAMf,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoBC,OAAO,CAACC,GAAR,CAAYC,WAAhC,CAArB;AACA,QAAMC,EAAE,GAAGL,MAAM,CAACK,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMgB,UAAU,GAAG,MAAMjB,iBAAiB,CAACkB,OAAlB,CAA0B;AACjDd,IAAAA,GAAG,EAAE,IAAInB,QAAJ,CAAayB,QAAb;AAD4C,GAA1B,CAAzB;AAGAhB,EAAAA,MAAM,CAACkB,KAAP;AAEA,SAAO;AACLO,IAAAA,KAAK,EAAE;AACLF,MAAAA,UAAU,EAAE;AACVG,QAAAA,EAAE,EAAEH,UAAU,CAACb,GAAX,CAAeO,QAAf,EADM;AAEVrB,QAAAA,KAAK,EAAE2B,UAAU,CAAC3B,KAFR;AAGVD,QAAAA,KAAK,EAAE4B,UAAU,CAAC5B,KAHR;AAIVG,QAAAA,OAAO,EAAEyB,UAAU,CAACzB,OAJV;AAKVD,QAAAA,WAAW,EAAE0B,UAAU,CAAC1B;AALd;AADP;AADF,GAAP;AAWD,CArBM","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\r\nimport React from \"react\";\r\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\r\nconst index = ({image,title,description,address}) => {\r\n  return (\r\n    <MeetupDetails\r\n      image={image}\r\n      title={title}\r\n      address={address}\r\n      description={description}\r\n    />\r\n  );\r\n};\r\n\r\nexport default index;\r\nexport const getStaticPaths = async () => {\r\n  const client = await MongoClient.connect(process.env.MONGODB_URL);\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetupsData = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n  const singleMeetupData = meetupsData.map((meetup) => ({\r\n    params: {\r\n      meetupId: meetup._id.toString(),\r\n    },\r\n  }));\r\n\r\n  client.close();\r\n  return {\r\n    paths: singleMeetupData,\r\n    fallback: false,\r\n  };\r\n};\r\nexport const getStaticProps = async (context) => {\r\n  const { meetupId } = context.params;\r\n  const client = await MongoClient.connect(process.env.MONGODB_URL);\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetupData = await meetupsCollection.findOne({\r\n    _id: new ObjectId(meetupId),\r\n  });\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: meetupData._id.toString(),\r\n        title: meetupData.title,\r\n        image: meetupData.image,\r\n        address: meetupData.address,\r\n        description: meetupData.description,\r\n      },\r\n    },\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}